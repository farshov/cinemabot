import aiohttp

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ParseMode

import json
import typing as tp
import random

from lib.config import BOT_TOKEN, google_url, google_headers, kinopoisk_cloud
import lib.keyboards as kb
from lib.utils import get_request_to_google_search, get_movie_kinopoisk_id, get_watch_link

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


LAST_ASKED_MOVIE: tp.Dict[int, tp.Dict[str, tp.Any]] = {}


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    greet_photo = "https://–¥–≤–∏–∂–µ–Ω–∏–µ–≤–º–µ—Å—Ç–µ.—Ä—Ñ/800/600/https/s11.stc.all.kpcdn.net/share/i/4/1805959/inx960x640.jpg"
    await bot.send_photo(
        message.from_user.id,
        photo=greet_photo
    )

    text = "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç *–õ–µ–æ–Ω–∞—Ä–¥–æ –î–µ–®–∞–¥–æ*. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n"\
           "üé¨ –ö–æ–º—É –∫–∞–∫ –Ω–µ –º–Ω–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫–∏–Ω–æ. –¢–∞–∫ —á—Ç–æ, –º–æ–π —é–Ω—ã–π –¥—Ä—É–≥, "\
           "–º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∏–Ω–µ–º–æ—Ç–æ–≥—Ä–∞—Ñ–µ.\n" \
           "üòä –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"
    await bot.send_message(
        message.from_user.id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.additional_func,
    )


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    text = "üëã –≠–π, —è –õ–µ–æ! –í–∏–∂—É, —á—Ç–æ —Ç—ã –Ω–µ–º–Ω–æ–≥–æ –∑–∞–±–ª—É–¥–∏–ª—Å—è. –î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é.\n" \
           "üîç –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ, —Ç—Ä–µ–π–ª–µ—Ä–∞ –∏ –¥–∞–∂–µ –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, " \
           "–≥–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ.\n" \
           "‚å®Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ —Ç–æ—á–Ω–æ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ, " \
           "–µ—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ " \
           "(—è –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ–∏—Å–∫–≤–æ–π –¥–≤–∏–∂–æ–∫ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ üè¢, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è –Ω–∞–∑—ã–≤–∞—Ç—å. " \
           "–ù–æ –∏–Ω–æ–≥–¥–∞ –ø–æ–∏—Å–∫ –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ–¥–≤–æ–¥–∏—Ç).\n" \
           "üìå –ï—Å–ª–∏ —Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ —è –ø–æ–∫–∞–∂—É, " \
           "–±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç–æ –º–æ–∂–µ—à—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏.\n" \
           "‚úàÔ∏è –¢–∞–∫–∂–µ —Å–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–æ–π –±–ª–æ–≥, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç. " \
           "–ü–æ–¥–ø–∏—Å–∫–∞-–ª–∞–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è!\n" \
           "üòö –í—Å–µ–≥–¥–∞ –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º, –õ–µ–æ!"
    await bot.send_message(
        message.from_user.id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb.additional_func,
    )


@dp.callback_query_handler(lambda c: c.data == 'movie_watch_trailer')
async def process_callback_button_movie_trailer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in LAST_ASKED_MOVIE:
        await bot.send_message(callback_query.from_user.id,
                               "üò± –ü—Ä–æ—Å—Ç–∏, –∑–∞–±—ã–ª, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –º—ã –æ–±—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                               reply_markup=kb.additional_func,
                               )
        return

    movie_info = LAST_ASKED_MOVIE[callback_query.from_user.id]
    if 'trailer' in movie_info and movie_info['trailer']:
        response = f"*–¢—Ä–µ–π–ª–µ—Ä: * {movie_info['trailer']}"
        await bot.send_message(callback_query.from_user.id,
                               response,
                               parse_mode=ParseMode.MARKDOWN,
                               reply_markup=kb.additional_func,)
    else:
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                               reply_markup=kb.additional_func,)


@dp.callback_query_handler(lambda c: c.data == 'movie_director')
async def process_callback_button_movie_director(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in LAST_ASKED_MOVIE:
        await bot.send_message(callback_query.from_user.id,
                               "üò± –ü—Ä–æ—Å—Ç–∏, –∑–∞–±—ã–ª, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –º—ã –æ–±—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                               reply_markup=kb.additional_func,)
        return

    movie_info = LAST_ASKED_MOVIE[callback_query.from_user.id]
    if 'directors' not in movie_info or not len(movie_info['directors']):
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                               reply_markup=kb.additional_func,)
        return
    if len(movie_info['directors']) == 1:
        response = f"*–†–µ–∂–∏—Å—Å–µ—Ä:* {movie_info['directors'][0]}"
    else:
        response = f"*–†–µ–∂–∏—Å—Å–µ—Ä—ã:* "
        for director in movie_info['directors'][:-1]:
            response += director + ", "
        response += movie_info['directors'][-1]
    await bot.send_message(callback_query.from_user.id, response,
                           parse_mode=ParseMode.MARKDOWN,
                           reply_markup=kb.additional_func,)


@dp.callback_query_handler(lambda c: c.data == 'movie_actors')
async def process_callback_button_movie_actors(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in LAST_ASKED_MOVIE:
        await bot.send_message(callback_query.from_user.id,
                               "üò± –ü—Ä–æ—Å—Ç–∏, –∑–∞–±—ã–ª, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –º—ã –æ–±—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                               reply_markup=kb.additional_func,)
        return

    movie_info = LAST_ASKED_MOVIE[callback_query.from_user.id]
    if 'actors' not in movie_info or not len(movie_info['actors']):
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                               reply_markup=kb.additional_func,)
        return

    response = f"*–ê–∫—Ç–µ—Ä—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤:* "
    for director in movie_info['actors'][:-1]:
        response += director + ", "
    response += movie_info['actors'][-1]
    await bot.send_message(callback_query.from_user.id, response,
                           parse_mode=ParseMode.MARKDOWN,)


@dp.callback_query_handler(lambda c: c.data == 'movie_watch')
async def process_callback_button_movie_watch(callback_query: types.CallbackQuery) -> None:
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in LAST_ASKED_MOVIE:
        await bot.send_message(callback_query.from_user.id,
                               "üò± –ü—Ä–æ—Å—Ç–∏, –∑–∞–±—ã–ª, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –º—ã –æ–±—Å—É–∂–¥–∞–µ–º. –ù–∞–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                               reply_markup=kb.additional_func,)
        return

    movie_info = LAST_ASKED_MOVIE[callback_query.from_user.id]
    if 'watch_movie_link' not in movie_info or not len(movie_info['watch_movie_link']):
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ù–µ –Ω–∞—à–µ–ª –Ω–∏—á–µ–≥–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É",
                               reply_markup=kb.additional_func,)
        return

    response = f"*–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:* " + movie_info['watch_movie_link']
    await bot.send_message(callback_query.from_user.id, response,
                           parse_mode=ParseMode.MARKDOWN,
                           reply_markup=kb.additional_func,)


@dp.message_handler(lambda x: x.text == "–ë–ª–æ–≥")
async def process_random_movie_button(message: types.Message) -> None:
    imgs = {
        "–≠—Ç–æ —è –≤ –ì–æ–ª–ª–∏–≤—É–¥–µ –±—ã–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://f10.pmo.ee/oy9hfQ3N-hEgCBgJJ26BZRTAcFE=/"
                                                  "1370x820/filters:focal(1642x298:2253x905)/nginx/o/"
                                                  "2020/01/20/12882968t1h1759.jpg",
        "–≠—Ç–æ —è –Ω–∞ –æ—Ö–æ—Ç–µ –±—ã–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://i.ytimg.com/vi/Zm8G8LwqVBc/maxresdefault.jpg",
        "–≠—Ç–æ —è Aviasales —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://avatars.mds.yandex.net/get-zen_doc/"
                                                         "1034365/pub_5bdd67c594c14900aa528f27_5bdd682"
                                                         "fe4c44c00aa0228ce/scale_1200",
        "–≠—Ç–æ —è –ø–æ –∞–ª–≥–æ—Å–∞–º –æ—Ç–ª –ø–æ–ª—É—á–∏–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://s0.rbk.ru/v6_top_pics/"
                                                         "media/img/8/87/754567222734878.jpg",
        "–≠—Ç–æ —è –ø–æ –∞–ª–≥–æ—Å–∞–º –æ—Ç–ª –ø–æ–ª—É—á–∏–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://s0.rbk.ru/v6_top_pics/"
                                                         "media/img/8/87/754567222734878.jpg",
        "–≠—Ç–æ —è –ø–æ –∞–ª–≥–æ—Å–∞–º –æ—Ç–ª –ø–æ–ª—É—á–∏–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://s0.rbk.ru/v6_top_pics/"
                                                         "media/img/8/87/754567222734878.jpg",
        "–≠—Ç–æ —è –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–º –±—ã–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://lh3.googleusercontent.com/proxy/"
                                                  "bViVwAv60qATjqRU5B-U_XmDtiw2GYLLYWGx0M9PbomE8sA_"
                                                  "0C4p7yw-Yt62DSPg0sqEzPjLEUmOO3fyXiAzDKfEMJMo3s4",
        "–≠—Ç–æ —è –Ω–∞ —Ä–µ—á–∫–µ –±—ã–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://files.vm.ru/photo/vecherka/"
                                               "2017/12/doc6xt2ahmo2ex13whuj9z0_800_480.jpg",
        "–≠—Ç–æ —è –Ω–∞ –¥–∏–∫–æ–º –∑–∞–ø–∞–¥–µ –±—ã–ª, —â–∞—Å —è –¥–æ–º–∞ —É–∂–µ.": "https://regnum.ru/uploads/pictures/"
                                                      "news/2019/01/23/regnum_picture_1548221299149453_normal.jpg",
    }
    img_number = random.randint(0, len(imgs) - 1)
    caption = sorted(list(imgs.keys()))[img_number]
    await bot.send_photo(
        message.from_user.id,
        photo=imgs[caption],
        caption=caption,
        parse_mode=ParseMode.MARKDOWN,
    )


@dp.message_handler()
async def process_text(message: types.Message) -> None:
    try:
        search_results = await get_request_to_google_search(message.text + " –∫–∏–Ω–æ")
    except RuntimeError:
        await bot.send_photo(
            message.from_user.id,
            photo="https://memepedia.ru/wp-content/uploads/2017/08/–æ—Å—Ç—Ä–æ–≤-–ø—Ä–æ–∫–ª—è—Ç—ã—Ö-–º–µ–º.jpg",
            caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
        )
        return

    movie_id, genre = get_movie_kinopoisk_id(search_results)
    if movie_id == -1 and genre == "not found":
        await bot.send_photo(
            message.from_user.id,
            photo="https://memepedia.ru/wp-content/uploads/2017/08/–æ—Å—Ç—Ä–æ–≤-–ø—Ä–æ–∫–ª—è—Ç—ã—Ö-–º–µ–º.jpg",
            caption="‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏",
            reply_markup=kb.additional_func,
        )
        return

    request = f"https://api.kinopoisk.cloud/{genre}/{movie_id}/token/{kinopoisk_cloud}"
    async with aiohttp.ClientSession() as session:
        async with session.get(request) as resp:
            response = await resp.text()
            response_status = resp.status

    if response_status >= 400:
        await bot.send_message(
            message.from_user.id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –≤ –±–∞–∑–µ",
            reply_markup=kb.additional_func,
        )
        return

    parsed = json.loads(response)

    watch_movie_link = get_watch_link(search_results)
    if watch_movie_link is not None:
        parsed['watch_movie_link'] = watch_movie_link

    LAST_ASKED_MOVIE[message.from_user.id] = parsed

    caption = ""
    if 'title' in parsed and parsed['title'] is not None:
        caption += f"‚úîÔ∏è*–ù–∞–∑–≤–∞–Ω–∏–µ*: {parsed['title']}\n"
    if 'year' in parsed and parsed['year'] is not None:
        caption += f"‚úîÔ∏è*–ì–æ–¥*: {parsed['year']}\n"
    if 'rating_kinopoisk' in parsed and parsed['rating_kinopoisk'] is not None:
        caption += f"‚úîÔ∏è*–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫*: {parsed['rating_kinopoisk']}\n"
    if 'description' in parsed and parsed['description'] is not None:
        caption += f"‚úîÔ∏è*–û–ø–∏—Å–∞–Ω–∏–µ*: {parsed['description']}"

    if 'poster' in parsed and parsed['poster'] is not None:
        await bot.send_photo(
            message.from_user.id,
            photo=parsed['poster'][2:],
            caption=caption,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.movie_keyboard,
        )
    elif caption:
        await bot.send_message(
            message.from_user.id,
            text=caption,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.movie_keyboard,
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –≤ –±–∞–∑–µ",
            reply_markup=kb.additional_func,
        )

if __name__ == '__main__':
    executor.start_polling(dp)
